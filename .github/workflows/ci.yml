name: CI/CD Pipeline

on:
  push:
    branches: [main, dev, dev-*]
  pull_request:
    branches: [main, dev]

jobs:
  test:
    name: 运行测试
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: 安装 pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: 获取 pnpm store 目录
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: 设置 pnpm 缓存
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 代码检查 (ESLint)
        run: pnpm run lint

      - name: 运行单元测试
        run: pnpm run test:unit:run

      - name: 构建项目
        run: pnpm run build

      - name: 上传测试覆盖率报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-coverage
          path: coverage/
          retention-days: 7

  deploy-storybook:
    name: 部署 Storybook 到 GitHub Pages
    runs-on: ubuntu-latest
    needs: test # 依赖测试作业，确保测试通过后再部署

    permissions:
      pages: write # 允许向 GitHub Pages 写入
      id-token: write # 允许从 OIDC 提供商请求 ID 令牌

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "npm"

      - name: 安装 pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: 获取 pnpm store 目录
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: 设置 pnpm 缓存
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 构建 Storybook
        run: pnpm run build-storybook --output-dir storybook-static

      - name: 设置 GitHub Pages
        uses: actions/configure-pages@v4

      - name: 上传 Storybook 产物
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./storybook-static

      - name: 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # 注释：E2E测试暂时禁用，原因：
  # 1. 早期开发阶段，变化频繁，E2E测试维护成本高
  # 2. 安装Playwright浏览器耗时较长（约5-10分钟）
  # 3. 当前只有基础测试，收益相对较低
  # 建议：当核心功能稳定后再启用，专注测试关键用户流程

  # e2e-tests:
  #   name: 端到端测试
  #   runs-on: ubuntu-latest
  #   needs: test
  #
  #   steps:
  #   - name: 检出代码
  #     uses: actions/checkout@v4
  #
  #   - name: 设置 Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: 20.x
  #       cache: 'npm'
  #
  #   - name: 安装 pnpm
  #     uses: pnpm/action-setup@v3
  #     with:
  #       version: 10
  #
  #   - name: 安装依赖
  #     run: pnpm install --frozen-lockfile
  #
  #   - name: 安装 Playwright 浏览器
  #     run: pnpm exec playwright install --with-deps
  #
  #   - name: 运行 Playwright 测试
  #     run: pnpm run test
  #
  #   - name: 上传 Playwright 报告
  #     uses: actions/upload-artifact@v4
  #     if: always()
  #     with:
  #       name: playwright-report
  #       path: playwright-report/
  #       retention-days: 30
